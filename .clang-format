# 这是 .clang-format 文件的内容
# 使用 YAML 格式

# 基于一个预设的风格，我们选择 Google 风格作为基础，它本身就是 K&R 风格
BasedOnStyle: Google

# --- 核心修改：控制大括号换行 ---
# 这项设置控制着不同场景下大括号的换行行为
BraceWrapping:
  # AfterFunction: true  # 如果想让函数的大括号换行，就设为 true
  AfterFunction: false    # <-- 这是你想要的！函数的大括号不换行

# --- 其他常用自定义配置 (可选，但推荐) ---

# 缩进宽度
IndentWidth: 4

# 使用 Tab 还是空格
UseTab: Never # 强烈建议使用空格，避免不同编辑器显示不一致

# 每行最大字符数，超过会自动换行
ColumnLimit: 120

# 指针的位置
# PointerAlignment: Left   # int* p
# PointerAlignment: Right  # int *p
PointerAlignment: Middle  # int * p (居中)

# 允许短的函数放在一行
# 例: int f() { return 0; }
AllowShortFunctionsOnASingleLine: None # 不允许

# C++11 以上的写法，比如 auto *p = ... 的指针位置
Cpp11BracedListStyle: true 这是 .clang-format 文件的内容
# 使用 YAML 格式

# 基于一个预设的风格，我们选择 Google 风格作为基础，它本身就是 K&R 风格
BasedOnStyle: Google

# --- 核心修改：控制大括号换行 ---
# 这项设置控制着不同场景下大括号的换行行为
BraceWrapping:
  # AfterFunction: true  # 如果想让函数的大括号换行，就设为 true
  AfterFunction: false    # <-- 这是你想要的！函数的大括号不换行

# --- 其他常用自定义配置 (可选，但推荐) ---

# 缩进宽度
IndentWidth: 4

# 使用 Tab 还是空格
UseTab: Never # 强烈建议使用空格，避免不同编辑器显示不一致

# 每行最大字符数，超过会自动换行
ColumnLimit: 120

# 指针的位置
# PointerAlignment: Left   # int* p
# PointerAlignment: Right  # int *p
PointerAlignment: Middle  # int * p (居中)

# 允许短的函数放在一行
# 例: int f() { return 0; }
AllowShortFunctionsOnASingleLine: None # 不允许

# C++11 以上的写法，比如 auto *p = ... 的指针位置
Cpp11BracedListStyle: true